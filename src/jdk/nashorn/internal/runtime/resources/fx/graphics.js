/*
 * Copyright (c) 2010, 2013, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

Animation                              = Java.type("javafx.animation.Animation");
Animation$Status                       = Java.type("javafx.animation.Animation$Status");
AnimationBuilder                       = Java.type("javafx.animation.AnimationBuilder");
AnimationTimer                         = Java.type("javafx.animation.AnimationTimer");
FadeTransition                         = Java.type("javafx.animation.FadeTransition");
FadeTransitionBuilder                  = Java.type("javafx.animation.FadeTransitionBuilder");
FillTransition                         = Java.type("javafx.animation.FillTransition");
FillTransitionBuilder                  = Java.type("javafx.animation.FillTransitionBuilder");
Interpolatable                         = Java.type("javafx.animation.Interpolatable");
Interpolator                           = Java.type("javafx.animation.Interpolator");
KeyFrame                               = Java.type("javafx.animation.KeyFrame");
KeyValue                               = Java.type("javafx.animation.KeyValue");
ParallelTransition                     = Java.type("javafx.animation.ParallelTransition");
ParallelTransitionBuilder              = Java.type("javafx.animation.ParallelTransitionBuilder");
PathTransition                         = Java.type("javafx.animation.PathTransition");
PathTransition$OrientationType         = Java.type("javafx.animation.PathTransition$OrientationType");
PathTransitionBuilder                  = Java.type("javafx.animation.PathTransitionBuilder");
PauseTransition                        = Java.type("javafx.animation.PauseTransition");
PauseTransitionBuilder                 = Java.type("javafx.animation.PauseTransitionBuilder");
RotateTransition                       = Java.type("javafx.animation.RotateTransition");
RotateTransitionBuilder                = Java.type("javafx.animation.RotateTransitionBuilder");
ScaleTransition                        = Java.type("javafx.animation.ScaleTransition");
ScaleTransitionBuilder                 = Java.type("javafx.animation.ScaleTransitionBuilder");
SequentialTransition                   = Java.type("javafx.animation.SequentialTransition");
SequentialTransitionBuilder            = Java.type("javafx.animation.SequentialTransitionBuilder");
StrokeTransition                       = Java.type("javafx.animation.StrokeTransition");
StrokeTransitionBuilder                = Java.type("javafx.animation.StrokeTransitionBuilder");
Timeline                               = Java.type("javafx.animation.Timeline");
TimelineBuilder                        = Java.type("javafx.animation.TimelineBuilder");
Transition                             = Java.type("javafx.animation.Transition");
TransitionBuilder                      = Java.type("javafx.animation.TransitionBuilder");
TranslateTransition                    = Java.type("javafx.animation.TranslateTransition");
TranslateTransitionBuilder             = Java.type("javafx.animation.TranslateTransitionBuilder");
Application                            = Java.type("javafx.application.Application");
Application$Parameters                 = Java.type("javafx.application.Application$Parameters");
ConditionalFeature                     = Java.type("javafx.application.ConditionalFeature");
HostServices                           = Java.type("javafx.application.HostServices");
Platform                               = Java.type("javafx.application.Platform");
Preloader                              = Java.type("javafx.application.Preloader");
Preloader$ErrorNotification            = Java.type("javafx.application.Preloader$ErrorNotification");
Preloader$PreloaderNotification        = Java.type("javafx.application.Preloader$PreloaderNotification");
Preloader$ProgressNotification         = Java.type("javafx.application.Preloader$ProgressNotification");
Preloader$StateChangeNotification      = Java.type("javafx.application.Preloader$StateChangeNotification");
Preloader$StateChangeNotification$Type = Java.type("javafx.application.Preloader$StateChangeNotification$Type");
ScheduledService                       = Java.type("javafx.concurrent.ScheduledService");
Service                                = Java.type("javafx.concurrent.Service");
Task                                   = Java.type("javafx.concurrent.Task");
Worker                                 = Java.type("javafx.concurrent.Worker");
Worker$State                           = Java.type("javafx.concurrent.Worker$State");
WorkerStateEvent                       = Java.type("javafx.concurrent.WorkerStateEvent");
CssMetaData                            = Java.type("javafx.css.CssMetaData");
FontCssMetaData                        = Java.type("javafx.css.FontCssMetaData");
ParsedValue                            = Java.type("javafx.css.ParsedValue");
PseudoClass                            = Java.type("javafx.css.PseudoClass");
SimpleStyleableBooleanProperty         = Java.type("javafx.css.SimpleStyleableBooleanProperty");
SimpleStyleableDoubleProperty          = Java.type("javafx.css.SimpleStyleableDoubleProperty");
SimpleStyleableFloatProperty           = Java.type("javafx.css.SimpleStyleableFloatProperty");
SimpleStyleableIntegerProperty         = Java.type("javafx.css.SimpleStyleableIntegerProperty");
SimpleStyleableLongProperty            = Java.type("javafx.css.SimpleStyleableLongProperty");
SimpleStyleableObjectProperty          = Java.type("javafx.css.SimpleStyleableObjectProperty");
SimpleStyleableStringProperty          = Java.type("javafx.css.SimpleStyleableStringProperty");
Styleable                              = Java.type("javafx.css.Styleable");
StyleableBooleanProperty               = Java.type("javafx.css.StyleableBooleanProperty");
StyleableDoubleProperty                = Java.type("javafx.css.StyleableDoubleProperty");
StyleableFloatProperty                 = Java.type("javafx.css.StyleableFloatProperty");
StyleableIntegerProperty               = Java.type("javafx.css.StyleableIntegerProperty");
StyleableLongProperty                  = Java.type("javafx.css.StyleableLongProperty");
StyleableObjectProperty                = Java.type("javafx.css.StyleableObjectProperty");
StyleableProperty                      = Java.type("javafx.css.StyleableProperty");
StyleableStringProperty                = Java.type("javafx.css.StyleableStringProperty");
StyleConverter                         = Java.type("javafx.css.StyleConverter");
StyleOrigin                            = Java.type("javafx.css.StyleOrigin");
BoundingBox                            = Java.type("javafx.geometry.BoundingBox");
BoundingBoxBuilder                     = Java.type("javafx.geometry.BoundingBoxBuilder");
Bounds                                 = Java.type("javafx.geometry.Bounds");
Dimension2D                            = Java.type("javafx.geometry.Dimension2D");
Dimension2DBuilder                     = Java.type("javafx.geometry.Dimension2DBuilder");
HorizontalDirection                    = Java.type("javafx.geometry.HorizontalDirection");
HPos                                   = Java.type("javafx.geometry.HPos");
Insets                                 = Java.type("javafx.geometry.Insets");
InsetsBuilder                          = Java.type("javafx.geometry.InsetsBuilder");
NodeOrientation                        = Java.type("javafx.geometry.NodeOrientation");
Orientation                            = Java.type("javafx.geometry.Orientation");
Point2D                                = Java.type("javafx.geometry.Point2D");
Point2DBuilder                         = Java.type("javafx.geometry.Point2DBuilder");
Point3D                                = Java.type("javafx.geometry.Point3D");
Point3DBuilder                         = Java.type("javafx.geometry.Point3DBuilder");
Pos                                    = Java.type("javafx.geometry.Pos");
Rectangle2D                            = Java.type("javafx.geometry.Rectangle2D");
Rectangle2DBuilder                     = Java.type("javafx.geometry.Rectangle2DBuilder");
Side                                   = Java.type("javafx.geometry.Side");
VerticalDirection                      = Java.type("javafx.geometry.VerticalDirection");
VPos                                   = Java.type("javafx.geometry.VPos");
Collation                              = Java.type("javafx.print.Collation");
JobSettings                            = Java.type("javafx.print.JobSettings");
PageLayout                             = Java.type("javafx.print.PageLayout");
PageOrientation                        = Java.type("javafx.print.PageOrientation");
PageRange                              = Java.type("javafx.print.PageRange");
Paper                                  = Java.type("javafx.print.Paper");
Paper$Units                            = Java.type("javafx.print.Paper$Units");
PaperSource                            = Java.type("javafx.print.PaperSource");
PrintColor                             = Java.type("javafx.print.PrintColor");
Printer                                = Java.type("javafx.print.Printer");
Printer$MarginType                     = Java.type("javafx.print.Printer$MarginType");
PrinterAttributes                      = Java.type("javafx.print.PrinterAttributes");
PrinterJob                             = Java.type("javafx.print.PrinterJob");
PrinterJob$JobStatus                   = Java.type("javafx.print.PrinterJob$JobStatus");
PrintQuality                           = Java.type("javafx.print.PrintQuality");
PrintResolution                        = Java.type("javafx.print.PrintResolution");
PrintSides                             = Java.type("javafx.print.PrintSides");
AmbientLight                           = Java.type("javafx.scene.AmbientLight");
//AmbientLightBuilder                    = Java.type("javafx.scene.AmbientLightBuilder");
CacheHint                              = Java.type("javafx.scene.CacheHint");
Camera                                 = Java.type("javafx.scene.Camera");
//CameraBuilder                          = Java.type("javafx.scene.CameraBuilder");
Canvas                                 = Java.type("javafx.scene.canvas.Canvas");
CanvasBuilder                          = Java.type("javafx.scene.canvas.CanvasBuilder");
GraphicsContext                        = Java.type("javafx.scene.canvas.GraphicsContext");
Cursor                                 = Java.type("javafx.scene.Cursor");
DepthTest                              = Java.type("javafx.scene.DepthTest");
Blend                                  = Java.type("javafx.scene.effect.Blend");
BlendBuilder                           = Java.type("javafx.scene.effect.BlendBuilder");
BlendMode                              = Java.type("javafx.scene.effect.BlendMode");
Bloom                                  = Java.type("javafx.scene.effect.Bloom");
BloomBuilder                           = Java.type("javafx.scene.effect.BloomBuilder");
BlurType                               = Java.type("javafx.scene.effect.BlurType");
BoxBlur                                = Java.type("javafx.scene.effect.BoxBlur");
BoxBlurBuilder                         = Java.type("javafx.scene.effect.BoxBlurBuilder");
ColorAdjust                            = Java.type("javafx.scene.effect.ColorAdjust");
ColorAdjustBuilder                     = Java.type("javafx.scene.effect.ColorAdjustBuilder");
ColorInput                             = Java.type("javafx.scene.effect.ColorInput");
ColorInputBuilder                      = Java.type("javafx.scene.effect.ColorInputBuilder");
DisplacementMap                        = Java.type("javafx.scene.effect.DisplacementMap");
DisplacementMapBuilder                 = Java.type("javafx.scene.effect.DisplacementMapBuilder");
DropShadow                             = Java.type("javafx.scene.effect.DropShadow");
DropShadowBuilder                      = Java.type("javafx.scene.effect.DropShadowBuilder");
Effect                                 = Java.type("javafx.scene.effect.Effect");
FloatMap                               = Java.type("javafx.scene.effect.FloatMap");
FloatMapBuilder                        = Java.type("javafx.scene.effect.FloatMapBuilder");
GaussianBlur                           = Java.type("javafx.scene.effect.GaussianBlur");
GaussianBlurBuilder                    = Java.type("javafx.scene.effect.GaussianBlurBuilder");
Glow                                   = Java.type("javafx.scene.effect.Glow");
GlowBuilder                            = Java.type("javafx.scene.effect.GlowBuilder");
ImageInput                             = Java.type("javafx.scene.effect.ImageInput");
ImageInputBuilder                      = Java.type("javafx.scene.effect.ImageInputBuilder");
InnerShadow                            = Java.type("javafx.scene.effect.InnerShadow");
InnerShadowBuilder                     = Java.type("javafx.scene.effect.InnerShadowBuilder");
Light                                  = Java.type("javafx.scene.effect.Light");
Light$Distant                          = Java.type("javafx.scene.effect.Light$Distant");
Light$Point                            = Java.type("javafx.scene.effect.Light$Point");
Light$Spot                             = Java.type("javafx.scene.effect.Light$Spot");
LightBuilder                           = Java.type("javafx.scene.effect.LightBuilder");
Lighting                               = Java.type("javafx.scene.effect.Lighting");
LightingBuilder                        = Java.type("javafx.scene.effect.LightingBuilder");
MotionBlur                             = Java.type("javafx.scene.effect.MotionBlur");
MotionBlurBuilder                      = Java.type("javafx.scene.effect.MotionBlurBuilder");
PerspectiveTransform                   = Java.type("javafx.scene.effect.PerspectiveTransform");
PerspectiveTransformBuilder            = Java.type("javafx.scene.effect.PerspectiveTransformBuilder");
Reflection                             = Java.type("javafx.scene.effect.Reflection");
ReflectionBuilder                      = Java.type("javafx.scene.effect.ReflectionBuilder");
SepiaTone                              = Java.type("javafx.scene.effect.SepiaTone");
SepiaToneBuilder                       = Java.type("javafx.scene.effect.SepiaToneBuilder");
Shadow                                 = Java.type("javafx.scene.effect.Shadow");
ShadowBuilder                          = Java.type("javafx.scene.effect.ShadowBuilder");
//Group                                  = Java.type("javafx.scene.Group");
GroupBuilder                           = Java.type("javafx.scene.GroupBuilder");
Image                                  = Java.type("javafx.scene.image.Image");
ImageView                              = Java.type("javafx.scene.image.ImageView");
ImageViewBuilder                       = Java.type("javafx.scene.image.ImageViewBuilder");
PixelFormat                            = Java.type("javafx.scene.image.PixelFormat");
PixelFormat$Type                       = Java.type("javafx.scene.image.PixelFormat$Type");
PixelReader                            = Java.type("javafx.scene.image.PixelReader");
PixelWriter                            = Java.type("javafx.scene.image.PixelWriter");
WritableImage                          = Java.type("javafx.scene.image.WritableImage");
WritablePixelFormat                    = Java.type("javafx.scene.image.WritablePixelFormat");
ImageCursor                            = Java.type("javafx.scene.ImageCursor");
ImageCursorBuilder                     = Java.type("javafx.scene.ImageCursorBuilder");
Clipboard                              = Java.type("javafx.scene.input.Clipboard");
ClipboardContent                       = Java.type("javafx.scene.input.ClipboardContent");
ClipboardContentBuilder                = Java.type("javafx.scene.input.ClipboardContentBuilder");
ContextMenuEvent                       = Java.type("javafx.scene.input.ContextMenuEvent");
DataFormat                             = Java.type("javafx.scene.input.DataFormat");
Dragboard                              = Java.type("javafx.scene.input.Dragboard");
DragEvent                              = Java.type("javafx.scene.input.DragEvent");
GestureEvent                           = Java.type("javafx.scene.input.GestureEvent");
InputEvent                             = Java.type("javafx.scene.input.InputEvent");
//InputEventBuilder                      = Java.type("javafx.scene.input.InputEventBuilder");
InputMethodEvent                       = Java.type("javafx.scene.input.InputMethodEvent");
InputMethodHighlight                   = Java.type("javafx.scene.input.InputMethodHighlight");
InputMethodRequests                    = Java.type("javafx.scene.input.InputMethodRequests");
InputMethodTextRun                     = Java.type("javafx.scene.input.InputMethodTextRun");
//InputMethodTextRunBuilder              = Java.type("javafx.scene.input.InputMethodTextRunBuilder");
KeyCharacterCombination                = Java.type("javafx.scene.input.KeyCharacterCombination");
KeyCharacterCombinationBuilder         = Java.type("javafx.scene.input.KeyCharacterCombinationBuilder");
KeyCode                                = Java.type("javafx.scene.input.KeyCode");
KeyCodeCombination                     = Java.type("javafx.scene.input.KeyCodeCombination");
KeyCodeCombinationBuilder              = Java.type("javafx.scene.input.KeyCodeCombinationBuilder");
KeyCombination                         = Java.type("javafx.scene.input.KeyCombination");
KeyCombination$Modifier                = Java.type("javafx.scene.input.KeyCombination$Modifier");
KeyCombination$ModifierValue           = Java.type("javafx.scene.input.KeyCombination$ModifierValue");
KeyEvent                               = Java.type("javafx.scene.input.KeyEvent");
Mnemonic                               = Java.type("javafx.scene.input.Mnemonic");
MnemonicBuilder                        = Java.type("javafx.scene.input.MnemonicBuilder");
MouseButton                            = Java.type("javafx.scene.input.MouseButton");
MouseDragEvent                         = Java.type("javafx.scene.input.MouseDragEvent");
MouseEvent                             = Java.type("javafx.scene.input.MouseEvent");
PickResult                             = Java.type("javafx.scene.input.PickResult");
RotateEvent                            = Java.type("javafx.scene.input.RotateEvent");
ScrollEvent                            = Java.type("javafx.scene.input.ScrollEvent");
ScrollEvent$HorizontalTextScrollUnits  = Java.type("javafx.scene.input.ScrollEvent$HorizontalTextScrollUnits");
ScrollEvent$VerticalTextScrollUnits    = Java.type("javafx.scene.input.ScrollEvent$VerticalTextScrollUnits");
SwipeEvent                             = Java.type("javafx.scene.input.SwipeEvent");
TouchEvent                             = Java.type("javafx.scene.input.TouchEvent");
TouchPoint                             = Java.type("javafx.scene.input.TouchPoint");
TouchPoint$State                       = Java.type("javafx.scene.input.TouchPoint$State");
//TouchPointBuilder                      = Java.type("javafx.scene.input.TouchPointBuilder");
TransferMode                           = Java.type("javafx.scene.input.TransferMode");
ZoomEvent                              = Java.type("javafx.scene.input.ZoomEvent");
AnchorPane                             = Java.type("javafx.scene.layout.AnchorPane");
AnchorPaneBuilder                      = Java.type("javafx.scene.layout.AnchorPaneBuilder");
Background                             = Java.type("javafx.scene.layout.Background");
//BackgroundBuilder                      = Java.type("javafx.scene.layout.BackgroundBuilder");
BackgroundFill                         = Java.type("javafx.scene.layout.BackgroundFill");
//BackgroundFillBuilder                  = Java.type("javafx.scene.layout.BackgroundFillBuilder");
BackgroundImage                        = Java.type("javafx.scene.layout.BackgroundImage");
//BackgroundImageBuilder                 = Java.type("javafx.scene.layout.BackgroundImageBuilder");
BackgroundPosition                     = Java.type("javafx.scene.layout.BackgroundPosition");
//BackgroundPositionBuilder              = Java.type("javafx.scene.layout.BackgroundPositionBuilder");
BackgroundRepeat                       = Java.type("javafx.scene.layout.BackgroundRepeat");
BackgroundSize                         = Java.type("javafx.scene.layout.BackgroundSize");
//BackgroundSizeBuilder                  = Java.type("javafx.scene.layout.BackgroundSizeBuilder");
Border                                 = Java.type("javafx.scene.layout.Border");
//BorderBuilder                          = Java.type("javafx.scene.layout.BorderBuilder");
BorderImage                            = Java.type("javafx.scene.layout.BorderImage");
//BorderImageBuilder                     = Java.type("javafx.scene.layout.BorderImageBuilder");
BorderPane                             = Java.type("javafx.scene.layout.BorderPane");
BorderPaneBuilder                      = Java.type("javafx.scene.layout.BorderPaneBuilder");
BorderRepeat                           = Java.type("javafx.scene.layout.BorderRepeat");
BorderStroke                           = Java.type("javafx.scene.layout.BorderStroke");
//BorderStrokeBuilder                    = Java.type("javafx.scene.layout.BorderStrokeBuilder");
BorderStrokeStyle                      = Java.type("javafx.scene.layout.BorderStrokeStyle");
//BorderStrokeStyleBuilder               = Java.type("javafx.scene.layout.BorderStrokeStyleBuilder");
BorderWidths                           = Java.type("javafx.scene.layout.BorderWidths");
//BorderWidthsBuilder                    = Java.type("javafx.scene.layout.BorderWidthsBuilder");
ColumnConstraints                      = Java.type("javafx.scene.layout.ColumnConstraints");
ColumnConstraintsBuilder               = Java.type("javafx.scene.layout.ColumnConstraintsBuilder");
ConstraintsBase                        = Java.type("javafx.scene.layout.ConstraintsBase");
CornerRadii                            = Java.type("javafx.scene.layout.CornerRadii");
FlowPane                               = Java.type("javafx.scene.layout.FlowPane");
FlowPaneBuilder                        = Java.type("javafx.scene.layout.FlowPaneBuilder");
GridPane                               = Java.type("javafx.scene.layout.GridPane");
GridPaneBuilder                        = Java.type("javafx.scene.layout.GridPaneBuilder");
HBox                                   = Java.type("javafx.scene.layout.HBox");
HBoxBuilder                            = Java.type("javafx.scene.layout.HBoxBuilder");
Pane                                   = Java.type("javafx.scene.layout.Pane");
PaneBuilder                            = Java.type("javafx.scene.layout.PaneBuilder");
Priority                               = Java.type("javafx.scene.layout.Priority");
Region                                 = Java.type("javafx.scene.layout.Region");
RegionBuilder                          = Java.type("javafx.scene.layout.RegionBuilder");
RowConstraints                         = Java.type("javafx.scene.layout.RowConstraints");
RowConstraintsBuilder                  = Java.type("javafx.scene.layout.RowConstraintsBuilder");
StackPane                              = Java.type("javafx.scene.layout.StackPane");
StackPaneBuilder                       = Java.type("javafx.scene.layout.StackPaneBuilder");
TilePane                               = Java.type("javafx.scene.layout.TilePane");
TilePaneBuilder                        = Java.type("javafx.scene.layout.TilePaneBuilder");
VBox                                   = Java.type("javafx.scene.layout.VBox");
VBoxBuilder                            = Java.type("javafx.scene.layout.VBoxBuilder");
LightBase                              = Java.type("javafx.scene.LightBase");
//LightBaseBuilder                       = Java.type("javafx.scene.LightBaseBuilder");
Node                                   = Java.type("javafx.scene.Node");
NodeBuilder                            = Java.type("javafx.scene.NodeBuilder");
Color                                  = Java.type("javafx.scene.paint.Color");
ColorBuilder                           = Java.type("javafx.scene.paint.ColorBuilder");
CycleMethod                            = Java.type("javafx.scene.paint.CycleMethod");
ImagePattern                           = Java.type("javafx.scene.paint.ImagePattern");
ImagePatternBuilder                    = Java.type("javafx.scene.paint.ImagePatternBuilder");
LinearGradient                         = Java.type("javafx.scene.paint.LinearGradient");
LinearGradientBuilder                  = Java.type("javafx.scene.paint.LinearGradientBuilder");
Material                               = Java.type("javafx.scene.paint.Material");
Paint                                  = Java.type("javafx.scene.paint.Paint");
PhongMaterial                          = Java.type("javafx.scene.paint.PhongMaterial");
//PhongMaterialBuilder                   = Java.type("javafx.scene.paint.PhongMaterialBuilder");
RadialGradient                         = Java.type("javafx.scene.paint.RadialGradient");
RadialGradientBuilder                  = Java.type("javafx.scene.paint.RadialGradientBuilder");
Stop                                   = Java.type("javafx.scene.paint.Stop");
StopBuilder                            = Java.type("javafx.scene.paint.StopBuilder");
ParallelCamera                         = Java.type("javafx.scene.ParallelCamera");
//ParallelCameraBuilder                  = Java.type("javafx.scene.ParallelCameraBuilder");
Parent                                 = Java.type("javafx.scene.Parent");
ParentBuilder                          = Java.type("javafx.scene.ParentBuilder");
PerspectiveCamera                      = Java.type("javafx.scene.PerspectiveCamera");
PerspectiveCameraBuilder               = Java.type("javafx.scene.PerspectiveCameraBuilder");
PointLight                             = Java.type("javafx.scene.PointLight");
//PointLightBuilder                      = Java.type("javafx.scene.PointLightBuilder");
//Scene                                  = Java.type("javafx.scene.Scene");
SceneBuilder                           = Java.type("javafx.scene.SceneBuilder");
Arc                                    = Java.type("javafx.scene.shape.Arc");
ArcBuilder                             = Java.type("javafx.scene.shape.ArcBuilder");
ArcTo                                  = Java.type("javafx.scene.shape.ArcTo");
ArcToBuilder                           = Java.type("javafx.scene.shape.ArcToBuilder");
ArcType                                = Java.type("javafx.scene.shape.ArcType");
Box                                    = Java.type("javafx.scene.shape.Box");
//BoxBuilder                             = Java.type("javafx.scene.shape.BoxBuilder");
Circle                                 = Java.type("javafx.scene.shape.Circle");
CircleBuilder                          = Java.type("javafx.scene.shape.CircleBuilder");
ClosePath                              = Java.type("javafx.scene.shape.ClosePath");
ClosePathBuilder                       = Java.type("javafx.scene.shape.ClosePathBuilder");
CubicCurve                             = Java.type("javafx.scene.shape.CubicCurve");
CubicCurveBuilder                      = Java.type("javafx.scene.shape.CubicCurveBuilder");
CubicCurveTo                           = Java.type("javafx.scene.shape.CubicCurveTo");
CubicCurveToBuilder                    = Java.type("javafx.scene.shape.CubicCurveToBuilder");
CullFace                               = Java.type("javafx.scene.shape.CullFace");
Cylinder                               = Java.type("javafx.scene.shape.Cylinder");
//CylinderBuilder                        = Java.type("javafx.scene.shape.CylinderBuilder");
DrawMode                               = Java.type("javafx.scene.shape.DrawMode");
Ellipse                                = Java.type("javafx.scene.shape.Ellipse");
EllipseBuilder                         = Java.type("javafx.scene.shape.EllipseBuilder");
FillRule                               = Java.type("javafx.scene.shape.FillRule");
HLineTo                                = Java.type("javafx.scene.shape.HLineTo");
HLineToBuilder                         = Java.type("javafx.scene.shape.HLineToBuilder");
Line                                   = Java.type("javafx.scene.shape.Line");
LineBuilder                            = Java.type("javafx.scene.shape.LineBuilder");
LineTo                                 = Java.type("javafx.scene.shape.LineTo");
LineToBuilder                          = Java.type("javafx.scene.shape.LineToBuilder");
Mesh                                   = Java.type("javafx.scene.shape.Mesh");
MeshView                               = Java.type("javafx.scene.shape.MeshView");
//MeshViewBuilder                        = Java.type("javafx.scene.shape.MeshViewBuilder");
MoveTo                                 = Java.type("javafx.scene.shape.MoveTo");
MoveToBuilder                          = Java.type("javafx.scene.shape.MoveToBuilder");
Path                                   = Java.type("javafx.scene.shape.Path");
PathBuilder                            = Java.type("javafx.scene.shape.PathBuilder");
PathElement                            = Java.type("javafx.scene.shape.PathElement");
PathElementBuilder                     = Java.type("javafx.scene.shape.PathElementBuilder");
Polygon                                = Java.type("javafx.scene.shape.Polygon");
PolygonBuilder                         = Java.type("javafx.scene.shape.PolygonBuilder");
Polyline                               = Java.type("javafx.scene.shape.Polyline");
PolylineBuilder                        = Java.type("javafx.scene.shape.PolylineBuilder");
QuadCurve                              = Java.type("javafx.scene.shape.QuadCurve");
QuadCurveBuilder                       = Java.type("javafx.scene.shape.QuadCurveBuilder");
QuadCurveTo                            = Java.type("javafx.scene.shape.QuadCurveTo");
QuadCurveToBuilder                     = Java.type("javafx.scene.shape.QuadCurveToBuilder");
Rectangle                              = Java.type("javafx.scene.shape.Rectangle");
RectangleBuilder                       = Java.type("javafx.scene.shape.RectangleBuilder");
Shape                                  = Java.type("javafx.scene.shape.Shape");
Shape3D                                = Java.type("javafx.scene.shape.Shape3D");
//Shape3DBuilder                         = Java.type("javafx.scene.shape.Shape3DBuilder");
ShapeBuilder                           = Java.type("javafx.scene.shape.ShapeBuilder");
Sphere                                 = Java.type("javafx.scene.shape.Sphere");
//SphereBuilder                          = Java.type("javafx.scene.shape.SphereBuilder");
StrokeLineCap                          = Java.type("javafx.scene.shape.StrokeLineCap");
StrokeLineJoin                         = Java.type("javafx.scene.shape.StrokeLineJoin");
StrokeType                             = Java.type("javafx.scene.shape.StrokeType");
SVGPath                                = Java.type("javafx.scene.shape.SVGPath");
SVGPathBuilder                         = Java.type("javafx.scene.shape.SVGPathBuilder");
TriangleMesh                           = Java.type("javafx.scene.shape.TriangleMesh");
VLineTo                                = Java.type("javafx.scene.shape.VLineTo");
VLineToBuilder                         = Java.type("javafx.scene.shape.VLineToBuilder");
SnapshotParameters                     = Java.type("javafx.scene.SnapshotParameters");
SnapshotParametersBuilder              = Java.type("javafx.scene.SnapshotParametersBuilder");
SnapshotResult                         = Java.type("javafx.scene.SnapshotResult");
SubScene                               = Java.type("javafx.scene.SubScene");
//SubSceneBuilder                        = Java.type("javafx.scene.SubSceneBuilder");
Font                                   = Java.type("javafx.scene.text.Font");
FontBuilder                            = Java.type("javafx.scene.text.FontBuilder");
FontPosture                            = Java.type("javafx.scene.text.FontPosture");
FontSmoothingType                      = Java.type("javafx.scene.text.FontSmoothingType");
FontWeight                             = Java.type("javafx.scene.text.FontWeight");
Text                                   = Java.type("javafx.scene.text.Text");
TextAlignment                          = Java.type("javafx.scene.text.TextAlignment");
TextBoundsType                         = Java.type("javafx.scene.text.TextBoundsType");
TextBuilder                            = Java.type("javafx.scene.text.TextBuilder");
TextFlow                               = Java.type("javafx.scene.text.TextFlow");
//TextFlowBuilder                        = Java.type("javafx.scene.text.TextFlowBuilder");
Affine                                 = Java.type("javafx.scene.transform.Affine");
AffineBuilder                          = Java.type("javafx.scene.transform.AffineBuilder");
MatrixType                             = Java.type("javafx.scene.transform.MatrixType");
NonInvertibleTransformException        = Java.type("javafx.scene.transform.NonInvertibleTransformException");
Rotate                                 = Java.type("javafx.scene.transform.Rotate");
RotateBuilder                          = Java.type("javafx.scene.transform.RotateBuilder");
Scale                                  = Java.type("javafx.scene.transform.Scale");
ScaleBuilder                           = Java.type("javafx.scene.transform.ScaleBuilder");
Shear                                  = Java.type("javafx.scene.transform.Shear");
ShearBuilder                           = Java.type("javafx.scene.transform.ShearBuilder");
Transform                              = Java.type("javafx.scene.transform.Transform");
//TransformBuilder                       = Java.type("javafx.scene.transform.TransformBuilder");
TransformChangedEvent                  = Java.type("javafx.scene.transform.TransformChangedEvent");
Translate                              = Java.type("javafx.scene.transform.Translate");
TranslateBuilder                       = Java.type("javafx.scene.transform.TranslateBuilder");
DirectoryChooser                       = Java.type("javafx.stage.DirectoryChooser");
DirectoryChooserBuilder                = Java.type("javafx.stage.DirectoryChooserBuilder");
FileChooser                            = Java.type("javafx.stage.FileChooser");
FileChooser$ExtensionFilter            = Java.type("javafx.stage.FileChooser$ExtensionFilter");
FileChooserBuilder                     = Java.type("javafx.stage.FileChooserBuilder");
Modality                               = Java.type("javafx.stage.Modality");
Popup                                  = Java.type("javafx.stage.Popup");
PopupBuilder                           = Java.type("javafx.stage.PopupBuilder");
PopupWindow                            = Java.type("javafx.stage.PopupWindow");
PopupWindowBuilder                     = Java.type("javafx.stage.PopupWindowBuilder");
Screen                                 = Java.type("javafx.stage.Screen");
//Stage                                  = Java.type("javafx.stage.Stage");
StageBuilder                           = Java.type("javafx.stage.StageBuilder");
StageStyle                             = Java.type("javafx.stage.StageStyle");
Window                                 = Java.type("javafx.stage.Window");
WindowBuilder                          = Java.type("javafx.stage.WindowBuilder");
WindowEvent                            = Java.type("javafx.stage.WindowEvent");

