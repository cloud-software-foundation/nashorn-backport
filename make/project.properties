#
# Copyright (c) 2010, 2012, Oracle and/or its affiliates. All rights reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
# 
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.
# 
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
# 
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
# 
# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
# or visit www.oracle.com if you need additional information or have any
# questions.
#

application.title=nashorn

# source and target levels
build.compiler=modern
javac.source=1.7
javac.target=1.7

# nashorn version information
nashorn.version=0.1
nashorn.fullversion=0.1
nashorn.product.name=Oracle Nashorn

# This directory is removed when the project is cleaned:
build.dir=build
build.classes.dir=${build.dir}/classes
build.zip=${build.dir}/nashorn.zip
build.gzip=${build.dir}/nashorn.tar.gz

# nashorn Shell tool
nashorn.shell.tool=jdk.nashorn.tools.Shell

# nasgen tool
nasgen.tool=jdk.nashorn.internal.tools.nasgen.Main

# parallel test runner tool
parallel.test.runner=jdk.nashorn.internal.test.framework.ParallelTestRunner

# test classes directory
build.test.classes.dir=${build.dir}/test/classes
# test results directory
build.test.results.dir=${build.dir}/test/reports

# This directory is removed when the project is cleaned:
dist.dir=dist
dist.jar=${dist.dir}/nashorn.jar
dist.javadoc.dir=${dist.dir}/javadoc

# directory where asm project lives
asm.dir=asm
asm.src.dir=${asm.dir}/src

# jars refererred
file.reference.testng.jar=test/lib/testng.jar

# Set testng verbose level
# From TestNG docs: "the verbosity level (0 to 10 where 10 is most detailed) 
# Actually, this is a lie: you can specify -1 and this will put TestNG in 
# debug mode (no longer slicing off stack traces and all)."

testng.verbose=2

# TestNG listeners - we want to replace TestNG's own JUnit
# reporter, but want everything else provided by default
# Unfortunately, we've to clone the other default reporters here.

testng.listeners=\
 org.testng.reporters.SuiteHTMLReporter, \
 org.testng.reporters.jq.Main, \
 org.testng.reporters.FailedReporter, \
 org.testng.reporters.XMLReporter \
 org.testng.reporters.EmailableReporter, \
 jdk.nashorn.internal.test.framework.JSJUnitReportReporter

# Define the version of Dynalink that is used. Version types are either
# 'snapshot' or 'release'. When it is 'snapshot', the version must have
# "-SNAPSHOT" suffix and the jar version will have a timestamp in it. When
# it's 'release', the version has no suffix, and the jar version is 
# identical to version - fun with Maven central.
dynalink.version=0.5-SNAPSHOT
dynalink.version.type=snapshot
dynalink.jar.version=0.5-20121218.140128-11
dynalink.dir.name=dynalink
dynalink.dir=build/${dynalink.dir.name}
dynalink.jar=${dynalink.dir}/dynalink.jar

javac.debug=true
javac.encoding=ascii
javac.classpath=\
    ${build.classes.dir}:\
    ${dynalink.jar}
javac.test.classpath=\
    ${build.classes.dir}:\
    ${build.test.classes.dir}:\
    ${file.reference.testng.jar}

meta.inf.dir=${src.dir}/META-INF

run.classpath=\
    ${build.classes.dir}

# test scripts to run
test.dir=test
test.script.dir=test/script
test.basic.dir=test/script/basic
test.error.dir=test/script/error
test.sandbox.dir=test/script/sandbox
test.external.dir=test/script/external
test262.dir=${test.external.dir}/test262
test262.suite.dir=${test262.dir}/test/suite

test-sys-prop.test.dir=${test.dir}
test-sys-prop.test.js.roots=${test.basic.dir} ${test.error.dir} ${test.sandbox.dir}
test-sys-prop.test262.suite.dir=${test262.suite.dir}
test-sys-prop.es5conform.testcases.dir=${test.external.dir}/ES5Conform/TestCases
test-sys-prop.test.basic.dir=${test.basic.dir}

# framework root for our script tests
test-sys-prop.test.js.framework=${test.script.dir}/assert.js

# Control the verbosity of ParserTest
test-sys-prop.parsertest.verbose=false

# turn on/off scripting mode for parser tests
test-sys-prop.parsertest.scripting=true

# turn on/off test262 scripts for parser tests
test-sys-prop.parsertest.test262=false

# Control the verbosity of the CompilerTest
test-sys-prop.compilertest.verbose=false

# turn on/off scripting mode for compiler tests
test-sys-prop.compilertest.scripting=true

# turn on/off test262 scripts for compiler tests
test-sys-prop.compilertest.test262=false

# test directory to be excluded.
test-sys-prop.test.js.exclude.dir=${test.script.dir}/currently-failing ${test.external.dir}

# run everything that's js in here, without checking file headers for test annotations
test-sys-prop.test.js.unchecked.dir=${test262.dir}

# test root for octane
octane-test-sys-prop.test.js.roots=${test.external.dir}/octane/benchmarks

# framework root for octane
octane-test-sys-prop.test.js.framework=${test.basic.dir}/run-octane.js

# list of tests to be excluded
octane-test-sys-prop.test.js.exclude.list=base.js

# test root for sunspider
sunspider-test-sys-prop.test.js.roots=${test.external.dir}/sunspider/

# framework root for sunspider
sunspider-test-sys-prop.test.js.framework=${test.basic.dir}/runsunspider.js

# list of tests to be excluded
sunspider-test-sys-prop.test.js.exclude.list=

# execute our script tests in shared nashorn context or not?
test-sys-prop.test.js.shared.context=false

# execute test262 tests in shared nashorn context or not?
test262-test-sys-prop.test.js.shared.context=true

# test262 test root
test262-test-sys-prop.test.js.roots=${test262.suite.dir}
# test262 enable/disable strict mode tests
test262-test-sys-prop.test.js.enable.strict.mode=true

# file containing test262 tests to be excluded
# test262-test-sys-prop.test.js.excludes.file=${test262.dir}/test/config/excludelist.xml

# list of test262 test dirs to be excluded
test262-test-sys-prop.test.js.exclude.dir=\
    ${test262.suite.dir}/intl402/

# test262 test frameworks
test262-test-sys-prop.test.js.framework=\
    -timezone=PST \
    ${test.script.dir}/test262.js \
    ${test262.dir}/test/harness/framework.js \
    ${test262.dir}/test/harness/sta.js

run.test.classpath=\
    ${file.reference.testng.jar}:\
    ${build.test.classes.dir}
src.dir=src
test.src.dir=test/src

#  -XX:+PrintCompilation -XX:+UnlockDiagnosticVMOptions -XX:+PrintNMethods
# add '-Dtest.js.outofprocess' to run each test in a new sub-process
run.test.jvmargs=-server -Xmx3G -XX:-TieredCompilation -esa -ea -Dnashorn.debug=true -Dfile.encoding=UTF-8 -XX:MaxPermSize=1G
#-XX:+HeapDumpOnOutOfMemoryError -XX:-UseCompressedKlassPointers -XX:+PrintHeapAtGC -XX:ClassMetaspaceSize=300M  
run.test.jvmargs.octane=-Xms2G -Xmx2G ${run.test.jvmargs}

run.test.jvmsecurityargs=-Xverify:all -Djava.security.manager -Djava.security.policy=${basedir}/build/nashorn.policy

# path of rhino.jar for benchmarks
rhino.jar=

v8.shell=d8

#path to rhino jar file
octaneperf-sys-prop.rhino.jar=${rhino.jar}

#timeout for performance tests in minutes
octaneperf-sys-prop.timeout.value=10
